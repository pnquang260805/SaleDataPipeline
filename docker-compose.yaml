services:
  jupyter:
    build:
      dockerfile: ./dockerfiles/jupyter.dockerfile
      context: .
      args:
        openjdk_version: "17"
        spark_version: "4.0.0"
        hadoop_version: "3.2"
        spark_download_url: "https://archive.apache.org/dist/spark/"
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_TOKEN=26082005qa 
      - JUPYTER_PASSWORD=26082005qa
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - project-net
    volumes:
      - .:/home/jovyan/work

  spark-master:
    build:
      dockerfile: ./dockerfiles/spark.dockerfile
      context: .
    container_name: spark-master
    ports:
      - "8080:8080" 
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - PYSPARK_PYTHON=/opt/conda/envs/py312/bin/python
      - PYSPARK_DRIVER_PYTHON=/opt/conda/envs/py312/bin/python
    networks:
      - project-net

  spark-worker:
    build:
      dockerfile: ./dockerfiles/spark.dockerfile
      context: .
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=1 
      - SPARK_WORKER_MEMORY=1G 
    networks:
      - project-net
    depends_on:
      - spark-master
    ports:
      - "8081:8081" # Worker UI
    volumes:
      - ./docker-data/spark-work/worker1:/opt/bitnami/spark/work

  spark-worker-2:
    build:
      dockerfile: ./dockerfiles/spark.dockerfile
      context: .
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=1 
      - SPARK_WORKER_MEMORY=1G 
    networks:
      - project-net
    depends_on:
      - spark-master
    ports:
      - "8082:8081" # Worker UI
    volumes:
      - ./docker-data/spark-work/worker2:/opt/bitnami/spark/work

  spark-worker-3:
    build:
      dockerfile: ./dockerfiles/spark.dockerfile
      context: .
    container_name: spark-worker-3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=1 
      - SPARK_WORKER_MEMORY=1G 
    networks:
      - project-net
    depends_on:
      - spark-master
    ports:
      - "8083:8081" # Worker UI
    volumes:
      - ./docker-data/spark-work/worker3:/opt/bitnami/spark/work
      
  superset:
    build:
      context: .
      dockerfile: ./dockerfiles/superset.dockerfile
    container_name: superset
    user: "root"
    # hive://spark-thrift:10000/default
    ports:
      - "8088:8088"
    networks:
      - project-net
    environment:
      - SUPERSET_SECRET_KEY=superset
    

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    volumes:
      - ./docker-data/kafka:/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    networks:
      - project-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1g

  kafka-init:
    image: bitnami/kafka:4.0.0
    depends_on:
      - kafka
    # my_connect_configs, my_connect_offsets, my_connect_statuses đều cần config cleanup.policy=compact
    command: |
      kafka-topics.sh --create --if-not-exists --topic my_connect_configs --bootstrap-server kafka:9092 --config cleanup.policy=compact;
      kafka-topics.sh --create --if-not-exists --topic my_connect_offsets --bootstrap-server kafka:9092 --config cleanup.policy=compact;
      kafka-topics.sh --create --if-not-exists --topic my_connect_statuses --bootstrap-server kafka:9092 --config cleanup.policy=compact;
      kafka-topics.sh --create --if-not-exists --topic schema_changes --bootstrap-server kafka:9092 --config cleanup.policy=compact;
    networks:
      - project-net

  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      project-net:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - ./docker-data/minio:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1g
    
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      project-net:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: |
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing minio/warehouse;
      /usr/bin/mc anonymous set public minio/warehouse;
      /usr/bin/mc mb --ignore-existing minio/bronze;
      /usr/bin/mc anonymous set public minio/bronze;
      /usr/bin/mc mb --ignore-existing minio/silver;
      /usr/bin/mc anonymous set public minio/silver;
      /usr/bin/mc mb --ignore-existing minio/gold;
      /usr/bin/mc anonymous set public minio/gold;
      tail -f /dev/null
      "

  nifi:
    image: apache/nifi:2.4.0
    container_name: nifi
    networks:
      - project-net
    ports:
      - "8443:8443"
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=nifi1234@Abc
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1g

  trino:
    hostname: trino
    container_name: trino
    image: 'trinodb/trino:476'
    ports:
      - '8086:8080'
    volumes:
      - ./etc:/usr/lib/trino/etc:ro
      - ./etc/catalog/sales.properties:/etc/trino/catalog/sales.properties # thêm dòng này để tự tạo các catalog
    networks:
      project-net:  

  mariadb:
    hostname: mariadb
    container_name: mariadb
    image: mariadb:10.5.8
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db
    networks:
      project-net:  
    volumes:
      - ./mysql_config/mysql.cnf:/etc/mysql/conf.d/custom.cnf
      - ./docker-data/metastore:/var/lib/mysql

  backend_db:
    hostname: backend_db
    container_name: backend_db
    image: mariadb:10.5.8
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: commerce_db
    # Change to Row binlog for suit with debezium
    command: [
      "--server-id=1",
      "--log-bin=mysql-bin",
      "--binlog-format=ROW",
    ]
    networks:
      project-net:  
    volumes:
      - ./mysql_config/mysql.cnf:/etc/mysql/conf.d/custom.cnf

  hive-metastore:
    hostname: hive-metastore
    container_name: hive-metastore
    image: 'bitsondatadev/hive-metastore:latest'
    ports:
      - '9083:9083' # Metastore Thrift
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb
    networks:
      project-net:  

  debezium-connect:
    image: debezium/connect:2.7.0.Final
    container_name: debezium-connect
    depends_on:
    - kafka
    - backend_db
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
    ports:
    - "7083:8083"
    networks:
      project-net:

  debezium-init:
    container_name: debezium-init
    networks:
      project-net:
    build:
      context: ./debezium_init
      dockerfile: Dockerfile
    depends_on:
      - debezium-connect
    env_file:
      - ./debezium_init/.env

  batch:
    build:
      context: ./batch_app
      dockerfile: Dockerfile
    container_name: batch-app
    networks:
      project-net:
    # depends_on:
    #   - minio
    #   - debezium-connect
    #   - spark-master
    env_file:
      - .env

networks:
  project-net:
    driver: bridge
  iceberg_net: